{"version":3,"sources":["components/Loader.js","components/Table.js","components/RowInfo.js","components/Main.js","components/TableSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","className","role","Table","props","data","React","useState","sortConfig","setSortConfig","renderData","setRenderData","useMemo","sortableData","filtredData","searchString","filter","item","firstName","toLowerCase","includes","lastName","id","toString","phone","email","sortedData","sort","a","b","key","direction","requestSort","onClick","scope","map","handleRowClick","aria-label","href","tabIndex","aria-disabled","RowInfo","person","description","address","streetAddress","city","state","zip","Main","style","display","justifyContent","padding","to","type","handleBtnClick","TableSearch","placeholder","aria-describedby","value","onChange","handleInput","App","loading","setLoading","isRowSelected","setIsRowSelected","isUrlSelected","setIsUrlSelected","setValue","useEffect","console","log","fetch","response","json","getData","path","e","target","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3be19c9a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loader.css\";\n\nfunction Loader() {\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <div className=\"spinner-border text-info\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import React from \"react\";\n\nfunction Table(props) {\n  // сохраняем передаваемый массив данных в переменную\n  const data = props.data;\n  //создаем стейт для сортируемого поля\n  const [sortConfig, setSortConfig] = React.useState(null);\n  //создаем стейт renderData - данные, которые будут отрисовываться в таблице в зависимости от сортировки/фильтрации\n  const [renderData, setRenderData] = React.useState([...data]);\n\n  //меняем стейт renderData при фильтрации(поиске)\n  React.useMemo(() => {\n    let sortableData = [...data];\n    let filtredData = [];\n\n    if (props.searchString !== \"\") {\n      filtredData = sortableData.filter((item) => {\n        return (\n          item.firstName\n            .toLowerCase()\n            .includes(props.searchString.toLowerCase()) ||\n          item.lastName\n            .toLowerCase()\n            .includes(props.searchString.toLowerCase()) ||\n          item.id.toString().includes(props.searchString) ||\n          item.phone.toLowerCase().includes(props.searchString.toLowerCase()) ||\n          item.email.toLowerCase().includes(props.searchString.toLowerCase())\n        );\n      });\n      setRenderData(filtredData);\n      return filtredData;\n    } else {setRenderData([...data]); return renderData;}\n  }, [props.searchString]);\n\n  //меняем стейт renderData при сортировке по возрастанию/убыванию\n    let sortedData = React.useMemo(() => {\n      let sortableData = [...renderData];\n      \n      if (sortConfig !== null) {\n       \n        sortableData.sort((a, b) => {\n          if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === \"increase\" ? -1 : 1;\n          }\n          if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === \"increase\" ? 1 : -1;\n          }\n          return 0;\n        });\n      }\n      \n      return sortableData;\n    }, [renderData, sortConfig])\n  ;\n\n  const requestSort = (key) => {\n    let direction = \"increase\";\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === \"increase\"\n    ) {\n      direction = \"decrease\";\n    }\n    setSortConfig({ key, direction });\n  };\n  return (\n    <>\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th onClick={() => requestSort(\"id\")} scope=\"col\" >\n              id\n              <span className=\"glyphicon glyphicon-sort\"/></th>\n            <th onClick={() => requestSort(\"firstName\")} scope=\"col\">\n              First Name\n            </th>\n            <th onClick={() => requestSort(\"lastName\")} scope=\"col\">\n              Last Name\n            </th>\n            <th onClick={() => requestSort(\"email\")} scope=\"col\">\n              email\n            </th>\n            <th onClick={() => requestSort(\"phone\")} scope=\"col\">\n              phone\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n          sortedData.map((item) => (\n            <tr\n              key={item.id + item.phone}\n              onClick={() => props.handleRowClick(item)}\n            >\n              <td>{item.id}</td>\n              <td>{item.firstName}</td>\n              <td>{item.lastName}</td>\n              <td>{item.email}</td>\n              <td>{item.phone}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <nav aria-label=\"Page navigation example\">\n        <ul className=\"pagination justify-content-center\">\n          <li className=\"page-item disabled\">\n            <a\n              className=\"page-link\"\n              href=\"#\"\n              tabIndex=\"-1\"\n              aria-disabled=\"true\"\n            >\n              Previous\n            </a>\n          </li>\n          <li className=\"page-item\">\n            <a className=\"page-link\" href=\"#\">\n              1\n            </a>\n          </li>\n          <li className=\"page-item\">\n            <a className=\"page-link\" href=\"#\">\n              2\n            </a>\n          </li>\n          <li className=\"page-item\">\n            <a className=\"page-link\" href=\"#\">\n              3\n            </a>\n          </li>\n          <li className=\"page-item\">\n            <a className=\"page-link\" href=\"#\">\n              Next\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\n\nfunction RowInfo(props) {\n  return (\n    <table className=\"table table-bordered\">\n      <thead>\n        <tr>\n          <th scope=\"col\">Выбран пользователь</th>\n          <th scope=\"col\">Описание</th>\n          <th scope=\"col\">Адрес проживания</th>\n          <th scope=\"col\">Город</th>\n          <th scope=\"col\">Провинция/штат</th>\n          <th scope=\"col\">Индекс</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{props.person.firstName + \" \" + props.person.lastName}</td>\n          <td>{props.person.description}</td>\n          <td>{props.person.address.streetAddress}</td>\n          <td>{props.person.address.city}</td>\n          <td>{props.person.address.state}</td>\n          <td>{props.person.address.zip}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default RowInfo;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Main(props) {\n  const smallUrl = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`;\n  const bigUrl = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32`;\n  return (\n    <div\n      style={{ display: \"flex\", justifyContent: \"center\", padding: \"50px 0\" }}\n    >\n      <Link to=\"/table\">\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-secondary\"\n          onClick={() => props.handleBtnClick(smallUrl)}\n        >\n          Вывести малый массив данных\n        </button>\n      </Link>\n     <Link to=\"/table\">\n     <button\n        type=\"button\"\n        className=\"btn btn-outline-secondary\"\n        onClick={() => props.handleBtnClick(bigUrl)}\n      >\n        Вывести большой массив данных\n      </button>\n     </Link>\n      \n      \n    </div>\n  );\n}\n\nexport default Main;\n","function TableSearch(props) {\n  return (\n    <div className=\"input-group mb-3\">\n      <input\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Поиск\"\n        aria-label=\"Recipient's username\"\n        aria-describedby=\"basic-addon2\"\n        value={props.value}\n        onChange={props.handleInput}\n      />\n      <span className=\"input-group-text\" id=\"basic-addon2\">\n       Поиск\n      </span>\n    </div>\n  );\n}\n\nexport default TableSearch;","import React from \"react\";\nimport Loader from \"./components/Loader\";\nimport Table from \"./components/Table\";\nimport RawInfo from \"./components/RowInfo\";\nimport Main from \"./components/Main\";\nimport TableSearch from \"./components/TableSearch\";\n\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  // создаем стейт загрузки данных (загрузились/не загрузились)\n  const [loading, setLoading] = React.useState(null);\n\n  //  создаем стейт для отображения информации о ряде\n  const [isRowSelected, setIsRowSelected] = React.useState(null);\n\n  //обработчик события onClick на ряду\n  function updateRowSelected(item) {\n    setIsRowSelected(item);\n  }\n  //создаем стейт для url\n  const [isUrlSelected, setIsUrlSelected] = React.useState(null);\n  //обработчик события onClick на кнопках компонента Main\n  function updateisUrlSelected(url) {\n    setIsUrlSelected(url);\n  }\n\n  // создаем стейт для строки, по которой ищут пользователя,\n  const [value, setValue] = React.useState(\"\");\n  //обработчик события onChange в строке поиска\n  function updateValue(e) {\n    setValue(e.target.value);\n    console.log(value);\n  }\n\n  React.useEffect(() => {\n    async function getData() {\n      console.log(isUrlSelected);\n      const response = await fetch(isUrlSelected);\n      const data = await response.json();\n      // обновляем стейт загрузки данных (помещаем в него данные)\n      setLoading([...data]);\n    }\n    getData();\n  }, [isUrlSelected]);\n  return (\n    <div className=\"container\">\n      <Switch>\n        <Route path=\"/table\">\n          {loading === null ? (\n            <Loader />\n          ) : (\n            <>\n              <TableSearch value={value} handleInput={updateValue}/>\n              <Table data={loading} handleRowClick={updateRowSelected} searchString={value}/>\n            </>\n          )}\n          {isRowSelected ? <RawInfo person={isRowSelected} /> : null}\n        </Route>\n        <Route path=\"/\">\n          <Main handleBtnClick={updateisUrlSelected} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}